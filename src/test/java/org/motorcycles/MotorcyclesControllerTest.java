package org.motorcycles;

import com.google.gson.Gson;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.Matchers.notNullValue;

@QuarkusTest
public class MotorcyclesControllerTest {

    private final Gson gson = new Gson();

    @Test
    public void testGetAllMotorcycles() {
        given()
                .when().get("/motorcycles")
                .then()
                .statusCode(200)
                .body(is(gson.toJson(new MotorcyclesController().getMotorcyclesList())));
    }

    @Test
    public void testGetMotorcycleById() {
        Long motorcycleId = 1L;
        given()
                .pathParam("id", motorcycleId)
                .when().get("/motorcycles/{id}")
                .then()
                .statusCode(200)
                .body("id", is(motorcycleId.intValue()));
    }

    @Test
    public void testUpdateMotorcycle() {
        Long motorcycleId = 1L;
        Motorcycle updatedMotorcycle = new Motorcycle(
                motorcycleId,
                "Updated Brand",
                "Updated Model",
                2023,
                150,
                "80 Nm",
                "Updated description"
        );

        given()
                .pathParam("id", motorcycleId)
                .body(gson.toJson(updatedMotorcycle))
                .header("Content-Type", "application/json")
                .when().put("/motorcycles/{id}")
                .then()
                .statusCode(200)
                .body("id", is(motorcycleId.intValue()))
                .body("brand", is(updatedMotorcycle.getBrand()))
                .body("model", is(updatedMotorcycle.getModel()))
                .body("year", is(updatedMotorcycle.getYear()))
                .body("horsepower", is(updatedMotorcycle.getCv()))
                .body("torque", is(updatedMotorcycle.getTorque()))
                .body("additionalInfo", is(updatedMotorcycle.getAdditionalInfo()));
    }

    @Test
    public void testCreateMotorcycle() {
        Motorcycle newMotorcycle = new Motorcycle(
                null, // The ID will be generated by the server
                "New Brand",
                "New Model",
                2023,
                180,
                "90 Nm",
                "New description"
        );

        given()
                .body(gson.toJson(newMotorcycle))
                .header("Content-Type", "application/json")
                .when().post("/motorcycles")
                .then()
                .statusCode(200)
                .body("id", notNullValue())
                .body("brand", is(newMotorcycle.getBrand()))
                .body("model", is(newMotorcycle.getModel()))
                .body("year", is(newMotorcycle.getYear()))
                .body("horsepower", is(newMotorcycle.getCv()))
                .body("torque", is(newMotorcycle.getTorque()))
                .body("additionalInfo", is(newMotorcycle.getAdditionalInfo()));
    }

    @Test
    public void testDeleteMotorcycle() {
        Long motorcycleId = 1L;
        given()
                .pathParam("id", motorcycleId)
                .when().delete("/motorcycles/{id}")
                .then()
                .statusCode(200)
                .body("id", is(motorcycleId.intValue()));
    }
}
